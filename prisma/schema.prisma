// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// title, couponCode, expiryDate
model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Relationships

// 1 to 1 Relationship User => Profile Relation
// 1 to Many => Category => Product Relation
// many to many => Market => Category

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  trainings   Training[]

  marketIds String[] @db.ObjectId
  markets   Market[] @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String   @unique
  imageUrl       String?
  description    String?
  isActive       Boolean
  isWholeSale    Boolean
  sku            String?
  barcode        String?
  productCode    String?
  unit           String?
  productPrice   Float
  salePrice      Float
  wholeSalePrice Float?
  wholesaleQty   Int?
  productStock   Int?
  qty            Int?
  tags           String[]
  categoryId     String   @db.ObjectId
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  orderItems OrderItems[]
  sales      Sale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Training {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  content     String?
  isActive    Boolean

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified Boolean   @default(false)
  products      Product[]

  role              UserRole       @default(USER)
  verificationToken String?
  farmerProfile     FarmerProfile?
  profile           UserProfile? // Link to user profile
  orders            Order[] //user can have multiple order
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sales             Sale[]
}

// Model for normal user profile
model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  // Add other fields for user onboarding information
  // For example:
  dateOfBirth DateTime?
  address     String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FarmerProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code               String
  contactPerson      String?
  contactPersonPhone String?
  imageUrl           String?
  email              String
  name               String
  notes              String?
  phone              String
  physicalAddress    String?
  terms              String?
  isActive           Boolean
  products           String[]
  landSize           Float
  mainCrop           String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Staff {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  password        String
  email           String    @unique
  phone           String
  physicalAddress String
  nin             String    @unique
  notes           String?
  imageUrl        String?
  dob             DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  firstName     String
  lastName      String
  email         String
  phone         String
  streetAddress String
  city          String
  country       String
  district      String
  shippingCost  Float
  orderNumber   String?
  paymentMethod String
  orderItems    OrderItems[]
  //status
  orderStatus   OrderStatus  @default(PROCESSING)
  //PROCESSING is the default value
  sales         Sale[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
}

model OrderItems {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  vendorId    String   @db.ObjectId
  imageUrl    String?
  title       String?
  orderNumber String?
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productId    String   @db.ObjectId
  vendorId     String   @db.ObjectId
  productQty   Int
  total        Float
  productTitle String
  productImage String
  productPrice Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relations
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  vendor       User     @relation(fields: [vendorId], references: [id])
}
